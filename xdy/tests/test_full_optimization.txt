0
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

1
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 1

-1
=
Function() r#0 ⚅#0
	extern[]
	body:
		return -1

10
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 10

100
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 100

123456789123456789123456789123456789
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 2147483647

987654321987654321987654321987654321
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 2147483647

09
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 9

(0)
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

{a}
=
Function() r#1 ⚅#0
	extern[a@0]
	body:
		return @0

{alloy}
=
Function() r#1 ⚅#0
	extern[alloy@0]
	body:
		return @0

{a0}
=
Function() r#1 ⚅#0
	extern[a0@0]
	body:
		return @0

{kebab-case}
=
Function() r#1 ⚅#0
	extern[kebab-case@0]
	body:
		return @0

{snake_case}
=
Function() r#1 ⚅#0
	extern[snake_case@0]
	body:
		return @0

{qualified.access}
=
Function() r#1 ⚅#0
	extern[qualified.access@0]
	body:
		return @0

{dés}
=
Function() r#1 ⚅#0
	extern[dés@0]
	body:
		return @0

{an external variable}
=
Function() r#1 ⚅#0
	extern[an external variable@0]
	body:
		return @0

{выражение в кости}
=
Function() r#1 ⚅#0
	extern[выражение в кости@0]
	body:
		return @0

{έκφραση ζαριών}
=
Function() r#1 ⚅#0
	extern[έκφραση ζαριών@0]
	body:
		return @0

a: {a}
=
Function(a@0) r#1 ⚅#0
	extern[]
	body:
		return @0

a, an external variable: {an external variable}
=
Function(a@0, an external variable@1) r#2 ⚅#0
	extern[]
	body:
		return @1

({a})
=
Function() r#1 ⚅#0
	extern[a@0]
	body:
		return @0

[0:5]
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll range 0:5
		@0 <- sum rolling record ⚅0
		return @0

[-10:10]
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll range -10:10
		@0 <- sum rolling record ⚅0
		return @0

[1d3 + 5 : 55 - 8D4]
=
Function() r#2 ⚅#3
	extern[]
	body:
		⚅0 <- roll range 1:3
		@0 <- sum rolling record ⚅0
		@0 <- 5 + @0
		⚅1 <- roll standard dice 8D4
		@1 <- sum rolling record ⚅1
		@1 <- 55 - @1
		⚅2 <- roll range @0:@1
		@0 <- sum rolling record ⚅2
		return @0

2d8
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 2D8
		@0 <- sum rolling record ⚅0
		return @0

20d10
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 20D10
		@0 <- sum rolling record ⚅0
		return @0

{x}D{y}
=
Function() r#2 ⚅#1
	extern[x@0, y@1]
	body:
		⚅0 <- roll standard dice @0D@1
		@0 <- sum rolling record ⚅0
		return @0

1D[-1, 0, 1]
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll range -1:1
		@0 <- sum rolling record ⚅0
		return @0

(1d6)
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll range 1:6
		@0 <- sum rolling record ⚅0
		return @0

(1)d(6)
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll range 1:6
		@0 <- sum rolling record ⚅0
		return @0

(1d[1, 1, 2, 3, 5, 8])D(1D8)
=
Function() r#2 ⚅#3
	extern[]
	body:
		⚅0 <- roll custom dice 1D[1, 1, 2, 3, 5, 8]
		@0 <- sum rolling record ⚅0
		⚅1 <- roll range 1:8
		@1 <- sum rolling record ⚅1
		⚅2 <- roll standard dice @0D@1
		@0 <- sum rolling record ⚅2
		return @0

3D10 drop lowest
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 3D10
		⚅0 <- drop lowest 1 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

3D10 drop lowest 2
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 3D10
		⚅0 <- drop lowest 2 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

10D10 drop lowest (3 + 3)
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 10D10
		⚅0 <- drop lowest 6 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

3D10 drop highest
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 3D10
		⚅0 <- drop highest 1 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

3D10 drop highest 2
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 3D10
		⚅0 <- drop highest 2 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

10D10 drop highest (3 + 3)
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 10D10
		⚅0 <- drop highest 6 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

10D10 drop highest 2 drop lowest 5
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 10D10
		⚅0 <- drop highest 2 from ⚅0
		⚅0 <- drop lowest 5 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

10D10 drop lowest (1 + 3) drop highest {x}
=
Function() r#1 ⚅#1
	extern[x@0]
	body:
		⚅0 <- roll standard dice 10D10
		⚅0 <- drop lowest 4 from ⚅0
		⚅0 <- drop highest @0 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

0 + 0
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

0 - 0
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

0 * 0
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

{a} × {b}
=
Function() r#2 ⚅#0
	extern[a@0, b@1]
	body:
		@0 <- @0 * @1
		return @0

0 / 0
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

{a} ÷ {b}
=
Function() r#2 ⚅#0
	extern[a@0, b@1]
	body:
		@0 <- @0 / @1
		return @0

{a} % {b}
=
Function() r#2 ⚅#0
	extern[a@0, b@1]
	body:
		@0 <- @0 % @1
		return @0

-10
=
Function() r#0 ⚅#0
	extern[]
	body:
		return -10

0 + 1 + 2
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 3

(0 + 1) + 2
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 3

0 + (1 + 2)
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 3

0 + 1 - 2
=
Function() r#0 ⚅#0
	extern[]
	body:
		return -1

0 + 1 * 2
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 2

0 + 1 / 2
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

0 + 1 % 2
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 1

0 + 1 ^ 2 ^ {a}
=
Function() r#1 ⚅#0
	extern[a@0]
	body:
		return 1

0 ^ {a} - {a} ^ 2
=
Function() r#2 ⚅#0
	extern[a@0]
	body:
		@1 <- 0 ^ @0
		@0 <- @0 * @0
		@0 <- @1 - @0
		return @0

0 ^ -{a} - -{a} ^ 2
=
Function() r#2 ⚅#0
	extern[a@0]
	body:
		@1 <- -@0
		@1 <- 0 ^ @1
		@0 <- @0 * @0
		@0 <- -@0
		@0 <- @1 - @0
		return @0

3D6 + 0
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 3D6
		@0 <- sum rolling record ⚅0
		return @0

5 + 3D6
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 3D6
		@0 <- sum rolling record ⚅0
		@0 <- 5 + @0
		return @0

3D6 + 2D12
=
Function() r#2 ⚅#2
	extern[]
	body:
		⚅0 <- roll standard dice 3D6
		@0 <- sum rolling record ⚅0
		⚅1 <- roll standard dice 2D12
		@1 <- sum rolling record ⚅1
		@0 <- @0 + @1
		return @0

3 ^ 3D6 + -2D12
=
Function() r#2 ⚅#2
	extern[]
	body:
		⚅0 <- roll standard dice 3D6
		@0 <- sum rolling record ⚅0
		@0 <- 3 ^ @0
		⚅1 <- roll standard dice 2D12
		@1 <- sum rolling record ⚅1
		@1 <- -@1
		@0 <- @0 + @1
		return @0

(5 + {a})d({b})
=
Function() r#2 ⚅#1
	extern[a@0, b@1]
	body:
		@0 <- 5 + @0
		⚅0 <- roll standard dice @0D@1
		@0 <- sum rolling record ⚅0
		return @0

(5 + {a})d({b}) drop lowest 1
=
Function() r#2 ⚅#1
	extern[a@0, b@1]
	body:
		@0 <- 5 + @0
		⚅0 <- roll standard dice @0D@1
		⚅0 <- drop lowest 1 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

(5 + {a})d({b}) drop highest 1 * 3
=
Function() r#2 ⚅#1
	extern[a@0, b@1]
	body:
		@0 <- 5 + @0
		⚅0 <- roll standard dice @0D@1
		⚅0 <- drop highest 1 from ⚅0
		@0 <- sum rolling record ⚅0
		@0 <- 3 * @0
		return @0

(5 + {a})d({b}) drop highest 1 % [2:3]
=
Function() r#2 ⚅#2
	extern[a@0, b@1]
	body:
		@0 <- 5 + @0
		⚅0 <- roll standard dice @0D@1
		⚅0 <- drop highest 1 from ⚅0
		@0 <- sum rolling record ⚅0
		⚅1 <- roll range 2:3
		@1 <- sum rolling record ⚅1
		@0 <- @0 % @1
		return @0

x: ({x} + 1) - ({x} + 1)
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return 0

x: 1 + {x}
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 1 + @0
		return @0

x: {x} + 1 + 1
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 2 + @0
		return @0

x: 1 + 1 + {x} + 1 + 1
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 4 + @0
		return @0

x: {x} + {x} + {x} + 1 + 1 + 1
=
Function(x@0) r#2 ⚅#0
	extern[]
	body:
		@1 <- 3 + @0
		@0 <- @0 + @0
		@0 <- @1 + @0
		return @0

x: {x} + 1 + {x} + 1 + {x} + 1
=
Function(x@0) r#2 ⚅#0
	extern[]
	body:
		@1 <- 3 + @0
		@0 <- @0 + @0
		@0 <- @1 + @0
		return @0

x: 1 + 1 + 1 + 1 - 1 + 1 + 1 + 1
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return 6

x: ({x} + {x} + {x}) + (1 + 1 + 1)
=
Function(x@0) r#2 ⚅#0
	extern[]
	body:
		@1 <- 3 + @0
		@0 <- @0 + @0
		@0 <- @1 + @0
		return @0

x: ({x} + {x} + {x}) - (1 + 1 + 1)
=
Function(x@0) r#2 ⚅#0
	extern[]
	body:
		@1 <- @0 + @0
		@0 <- @0 + @1
		@0 <- @0 - 3
		return @0

x: ({x} + 1 + {x}) - (1 + {x} + 1)
=
Function(x@0) r#2 ⚅#0
	extern[]
	body:
		@1 <- 1 + @0
		@1 <- @0 + @1
		@0 <- 2 + @0
		@0 <- @1 - @0
		return @0

x: ({x} + ({x} + ({x} + (1 + (1 + 1)))))
=
Function(x@0) r#2 ⚅#0
	extern[]
	body:
		@1 <- 3 + @0
		@0 <- @0 + @0
		@0 <- @1 + @0
		return @0

x: {x} * 1
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return @0

x: 1 * {x}
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return @0

x: {x} * 1 * 1
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return @0

x: 1 * 1 * {x} * 1 * 1
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return @0

x: {x} * {x} * {x} * 1 * 1 * 1
=
Function(x@0) r#2 ⚅#0
	extern[]
	body:
		@1 <- @0 * @0
		@0 <- @0 * @1
		return @0

x: {x} * 1 * {x} * 1 * {x} * 1
=
Function(x@0) r#2 ⚅#0
	extern[]
	body:
		@1 <- @0 * @0
		@0 <- @0 * @1
		return @0

x: 1 * 1 * 1 * 1 - 1 * 1 * 1 * 1
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return 0

x: ({x} * {x} * {x}) * (1 * 1 * 1)
=
Function(x@0) r#2 ⚅#0
	extern[]
	body:
		@1 <- @0 * @0
		@0 <- @0 * @1
		return @0

x: ({x} * {x} * {x}) - (1 * 1 * 1)
=
Function(x@0) r#2 ⚅#0
	extern[]
	body:
		@1 <- @0 * @0
		@0 <- @0 * @1
		@0 <- @0 - 1
		return @0

x: ({x} * 1 * {x}) - (1 * {x} * 1)
=
Function(x@0) r#2 ⚅#0
	extern[]
	body:
		@1 <- @0 * @0
		@0 <- @1 - @0
		return @0

x: ({x} * ({x} * ({x} * (1 * (1 * 1)))))
=
Function(x@0) r#2 ⚅#0
	extern[]
	body:
		@1 <- @0 * @0
		@0 <- @0 * @1
		return @0

x: {x} + {x} + 1 * {x} * 1 * 1
=
Function(x@0) r#2 ⚅#0
	extern[]
	body:
		@1 <- @0 + @0
		@0 <- @0 + @1
		return @0

x: {x} + {x} + 1 * {x} * 1 * 1 + 1 + 1
=
Function(x@0) r#2 ⚅#0
	extern[]
	body:
		@1 <- 2 + @0
		@0 <- @0 + @0
		@0 <- @1 + @0
		return @0

x: {x} - 1 - 2 - 3 - 4 - 5
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- @0 - 15
		return @0

x: 1 - {x} - 2 - 3 - 4 - 5
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 14 + @0
		@0 <- 1 - @0
		return @0

x: 1 - 2 - {x} - 3 - 4 - 5
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 14 + @0
		@0 <- 1 - @0
		return @0

x: 1 - 2 - 3 - {x} - 4 - 5
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 14 + @0
		@0 <- 1 - @0
		return @0

x: 1 - 2 - 3 - 4 - {x} - 5
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 14 + @0
		@0 <- 1 - @0
		return @0

x: 1 - 2 - 3 - 4 - 5 - {x}
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 14 + @0
		@0 <- 1 - @0
		return @0

x: {x} / 1 / 2 / 3 / 4 / 5
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- @0 / 120
		return @0

x: 1 / {x} / 2 / 3 / 4 / 5
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 120 * @0
		@0 <- 1 / @0
		return @0

x: 1 / 2 / {x} / 3 / 4 / 5
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 120 * @0
		@0 <- 1 / @0
		return @0

x: 1 / 2 / 3 / {x} / 4 / 5
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 120 * @0
		@0 <- 1 / @0
		return @0

x: 1 / 2 / 3 / 4 / {x} / 5
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 120 * @0
		@0 <- 1 / @0
		return @0

x: 1 / 2 / 3 / 4 / 5 / {x}
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 120 * @0
		@0 <- 1 / @0
		return @0

0 + 1
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 1

2147483647 + 1
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 2147483647

-2147483648 + -1
=
Function() r#0 ⚅#0
	extern[]
	body:
		return -2147483648

0 - 1
=
Function() r#0 ⚅#0
	extern[]
	body:
		return -1

2147483647 - -1
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 2147483647

-2147483648 - 1
=
Function() r#0 ⚅#0
	extern[]
	body:
		return -2147483648

100 * 100
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 10000

32768 * 65536
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 2147483647

32768 * 65537
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 2147483647

200 / 100
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 2

100 / 0
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

-2147483648 / -1
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 2147483647

200 % 100
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

100 % 0
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

0 ^ 0
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 1

0 ^ 1
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

0 ^ -1
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

1 ^ 0
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 1

1 ^ 1
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 1

1 ^ -1
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 1

1 ^ -2
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 1

(-1) ^ 0
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 1

(-1) ^ 1
=
Function() r#0 ⚅#0
	extern[]
	body:
		return -1

(-1) ^ 2
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 1

(-1) ^ -1
=
Function() r#0 ⚅#0
	extern[]
	body:
		return -1

(-1) ^ -2
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 1

10 ^ 0
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 1

10 ^ 3
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 1000

10 ^ 10000
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 2147483647

10 ^ -1
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

-0
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

-(-2147483648)
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 2147483647

1 + 2 - 3 + 4 - 5 + 6 - 7 + 8 - 9 + 10
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 7

x: 1 + 4 + {x} + 4 + 9
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 18 + @0
		return @0

1 + 4 + {x} + 4 + 9
=
Function() r#1 ⚅#0
	extern[x@0]
	body:
		@0 <- 18 + @0
		return @0

[5:10]
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll range 5:10
		@0 <- sum rolling record ⚅0
		return @0

[7:7]
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 7

[5:4]
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

3D6
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 3D6
		@0 <- sum rolling record ⚅0
		return @0

0D100
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

100D0
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

100D1
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 100

3D6 drop lowest 1
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 3D6
		⚅0 <- drop lowest 1 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

3D6 drop lowest 3
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

3D6 drop lowest 5
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

0D6 drop lowest 3
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

6D0 drop lowest 3
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

8D1 drop lowest 5
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 3

3D6 drop highest 1
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 3D6
		⚅0 <- drop highest 1 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

3D6 drop highest 3
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

3D6 drop highest 5
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

10D10 drop lowest (1 + 3)
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 10D10
		⚅0 <- drop lowest 4 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

0D6 drop highest 3
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

6D0 drop highest 3
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

8D1 drop highest 5
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 3

10D10 drop highest (1 + 3)
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 10D10
		⚅0 <- drop highest 4 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

8D1 drop lowest 3 drop highest 3
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 2

8D1 drop highest 3 drop lowest 3
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 2

{x}D(3 + 3)
=
Function() r#1 ⚅#1
	extern[x@0]
	body:
		⚅0 <- roll standard dice @0D6
		@0 <- sum rolling record ⚅0
		return @0

{x}D0
=
Function() r#1 ⚅#0
	extern[x@0]
	body:
		return 0

{x}D(-1)
=
Function() r#1 ⚅#0
	extern[x@0]
	body:
		return 0

{x}D1
=
Function() r#1 ⚅#0
	extern[x@0]
	body:
		return @0

0D{x}
=
Function() r#1 ⚅#0
	extern[x@0]
	body:
		return 0

(-1)D{x}
=
Function() r#1 ⚅#0
	extern[x@0]
	body:
		return 0

1D[0, 0, 0, 1, 1, 2]
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll custom dice 1D[0, 0, 0, 1, 1, 2]
		@0 <- sum rolling record ⚅0
		return @0

0D[0, 0, 0, 1, 1, 2]
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

5D[1]
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 5

8D[3, 3, 3]
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 24

5D[1, 2, 3] drop lowest 5
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

5D[1, 2, 3] drop lowest 6
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

5D[1, 1, 1] drop lowest 3
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 2

5D[1, 2, 3] drop highest 5
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

5D[1, 2, 3] drop highest 6
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 0

5D[1, 1, 1] drop highest 3
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 2

5D[5, 5, 5, 5] drop highest 3 drop lowest 1
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 5

5D[5, 5, 5, 5] drop lowest 3 drop highest 1
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 5

3D1 + 7
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 10

7 + 3D1
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 10

x: 0 + {x}
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return @0

x: {x} + 0
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return @0

x: {x} + 1
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 1 + @0
		return @0

x: 0 - {x}
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- -@0
		return @0

x: {x} - 0
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return @0

x: {x} - {x}
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return 0

x: {x} - 1
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- @0 - 1
		return @0

x: 0 * {x}
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return 0

x: {x} * 0
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return 0

x: -1 * {x}
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- -@0
		return @0

x: {x} * -1
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- -@0
		return @0

x: {x} * 2
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- @0 + @0
		return @0

x: 2 * {x}
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- @0 + @0
		return @0

x: {x} * 3
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 3 * @0
		return @0

x: 0 / {x}
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return 0

x: {x} / 0
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return 0

x: {x} / 1
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return @0

x: {x} / -1
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- -@0
		return @0

x: {x} / {x}
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return 1

x: {x} / 2
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- @0 / 2
		return @0

x: 0 % {x}
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return 0

x: {x} % 0
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return 0

x: {x} % 1
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return 0

x: {x} % 2
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- @0 % 2
		return @0

x: 0 ^ {x}
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 0 ^ @0
		return @0

x: 1 ^ {x}
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return 1

x: {x} ^ 0
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return 1

x: {x} ^ 1
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return @0

x: {x} ^ 2
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- @0 * @0
		return @0

x: {x} ^ 3
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- @0 ^ 3
		return @0

x: {x} ^ -1
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- @0 ^ -1
		return @0

x: -{x}
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- -@0
		return @0

x: --{x}
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return @0

x: ---{x}
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- -@0
		return @0

x: ----{x}
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return @0

x: --{x} + 2
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 2 + @0
		return @0

x: [{x}:{x}]
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return @0

x, y: [{x}:{y}]
=
Function(x@0, y@1) r#2 ⚅#1
	extern[]
	body:
		⚅0 <- roll range @0:@1
		@0 <- sum rolling record ⚅0
		return @0

x: {x}D1
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return @0

1D6
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll range 1:6
		@0 <- sum rolling record ⚅0
		return @0

x: 1D{x}
=
Function(x@0) r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll range 1:@0
		@0 <- sum rolling record ⚅0
		return @0

x, y: {x}D{y}
=
Function(x@0, y@1) r#2 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice @0D@1
		@0 <- sum rolling record ⚅0
		return @0

10D1
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 10

x: {x}D[1]
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return @0

x: {x}D[1, 1, 1]
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return @0

x: {x}D[5, 5, 5, 5, 5]
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 5 * @0
		return @0

x: 1D[3, 4, 5, 6]
=
Function(x@0) r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll range 3:6
		@0 <- sum rolling record ⚅0
		return @0

x: {x}D[1, 2, 3]
=
Function(x@0) r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice @0D3
		@0 <- sum rolling record ⚅0
		return @0

x: {x}D[3, 4, 5, 6, 7, 8]
=
Function(x@0) r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll custom dice @0D[3, 4, 5, 6, 7, 8]
		@0 <- sum rolling record ⚅0
		return @0

x: {x}D[1, 1, 2, 3, 5, 8]
=
Function(x@0) r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll custom dice @0D[1, 1, 2, 3, 5, 8]
		@0 <- sum rolling record ⚅0
		return @0

x: 10D1 drop lowest {x}
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 10 - @0
		return @0

x, y: {x}D1 drop lowest {y}
=
Function(x@0, y@1) r#2 ⚅#0
	extern[]
	body:
		@0 <- @0 - @1
		return @0

x: 1D{x} drop lowest 1
=
Function(x@0) r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll range 1:@0
		⚅0 <- drop lowest 1 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

x: {x}D1 drop lowest 1
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- @0 - 1
		return @0

x, y: 1D{x} drop lowest {y}
=
Function(x@0, y@1) r#2 ⚅#1
	extern[]
	body:
		⚅0 <- roll range 1:@0
		⚅0 <- drop lowest @1 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

x, y: 3D{x} drop lowest {y}
=
Function(x@0, y@1) r#2 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 3D@0
		⚅0 <- drop lowest @1 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

3D6 drop lowest 0
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 3D6
		@0 <- sum rolling record ⚅0
		return @0

3D6 drop lowest 1 drop lowest 1
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 3D6
		⚅0 <- drop lowest 2 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

3D6 drop lowest 1 drop lowest (-1)
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 3D6
		@0 <- sum rolling record ⚅0
		return @0

x: 10D1 drop highest {x}
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 10 - @0
		return @0

x, y: {x}D1 drop highest {y}
=
Function(x@0, y@1) r#2 ⚅#0
	extern[]
	body:
		@0 <- @0 - @1
		return @0

x: 1D{x} drop highest 1
=
Function(x@0) r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll range 1:@0
		⚅0 <- drop highest 1 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

x: {x}D1 drop highest 1
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- @0 - 1
		return @0

x, y: 1D{x} drop highest {y}
=
Function(x@0, y@1) r#2 ⚅#1
	extern[]
	body:
		⚅0 <- roll range 1:@0
		⚅0 <- drop highest @1 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

x, y: 3D{x} drop highest {y}
=
Function(x@0, y@1) r#2 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 3D@0
		⚅0 <- drop highest @1 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

3D6 drop highest 0
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 3D6
		@0 <- sum rolling record ⚅0
		return @0

3D6 drop highest 1 drop highest 1
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 3D6
		⚅0 <- drop highest 2 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

3D6 drop highest 1 drop highest (-1)
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 3D6
		@0 <- sum rolling record ⚅0
		return @0

x: 10D1 drop lowest {x} drop highest 1
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 1 + @0
		@0 <- 10 - @0
		return @0

x: 10D1 drop lowest 1 drop highest {x}
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 1 + @0
		@0 <- 10 - @0
		return @0

x: {x}D[1] drop lowest 3
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- @0 - 3
		return @0

x: {x}D[1, 1, 1] drop lowest 3
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- @0 - 3
		return @0

x: {x}D[5, 5, 5, 5, 5] drop lowest 5
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 5 * @0
		@0 <- @0 - 5
		return @0

x: 1D[3, 4, 5, 6] drop lowest {x}
=
Function(x@0) r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll range 3:6
		⚅0 <- drop lowest @0 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

x, y: {x}D[1, 2, 3] drop lowest {y}
=
Function(x@0, y@1) r#2 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice @0D3
		⚅0 <- drop lowest @1 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

x, y: {x}D[3, 4, 5, 6, 7, 8] drop lowest {y}
=
Function(x@0, y@1) r#2 ⚅#1
	extern[]
	body:
		⚅0 <- roll custom dice @0D[3, 4, 5, 6, 7, 8]
		⚅0 <- drop lowest @1 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

x, y: {x}D[1, 1, 2, 3, 5, 8] drop lowest {y}
=
Function(x@0, y@1) r#2 ⚅#1
	extern[]
	body:
		⚅0 <- roll custom dice @0D[1, 1, 2, 3, 5, 8]
		⚅0 <- drop lowest @1 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

x: {x}D[1] drop highest 3
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- @0 - 3
		return @0

x: {x}D[1, 1, 1] drop highest 3
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- @0 - 3
		return @0

x: {x}D[5, 5, 5, 5, 5] drop highest 5
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 5 * @0
		@0 <- @0 - 5
		return @0

x: 1D[3, 4, 5, 6] drop highest {x}
=
Function(x@0) r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll range 3:6
		⚅0 <- drop highest @0 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

x, y: {x}D[1, 2, 3] drop highest {y}
=
Function(x@0, y@1) r#2 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice @0D3
		⚅0 <- drop highest @1 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

x, y: {x}D[3, 4, 5, 6, 7, 8] drop highest {y}
=
Function(x@0, y@1) r#2 ⚅#1
	extern[]
	body:
		⚅0 <- roll custom dice @0D[3, 4, 5, 6, 7, 8]
		⚅0 <- drop highest @1 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

x, y: {x}D[1, 1, 2, 3, 5, 8] drop highest {y}
=
Function(x@0, y@1) r#2 ⚅#1
	extern[]
	body:
		⚅0 <- roll custom dice @0D[1, 1, 2, 3, 5, 8]
		⚅0 <- drop highest @1 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

x: {x}D[1] drop highest 1 drop lowest 1
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- @0 - 2
		return @0

x: {x}D[1, 1, 1] drop highest 1 drop lowest 1
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- @0 - 2
		return @0

x: {x}D[5, 5, 5, 5, 5] drop lowest 1 drop highest 1
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 5 * @0
		@0 <- @0 - 2
		return @0

x: 1D[3, 4, 5, 6] drop highest {x} drop lowest {x}
=
Function(x@0) r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll range 3:6
		⚅0 <- drop highest @0 from ⚅0
		⚅0 <- drop lowest @0 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

x, y: {x}D[1, 2, 3] drop highest {y} drop lowest {y}
=
Function(x@0, y@1) r#2 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice @0D3
		⚅0 <- drop highest @1 from ⚅0
		⚅0 <- drop lowest @1 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

x, y: {x}D[3, 4, 5, 6, 7, 8] drop highest {y} drop lowest {y}
=
Function(x@0, y@1) r#2 ⚅#1
	extern[]
	body:
		⚅0 <- roll custom dice @0D[3, 4, 5, 6, 7, 8]
		⚅0 <- drop highest @1 from ⚅0
		⚅0 <- drop lowest @1 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

x, y: {x}D[1, 1, 2, 3, 5, 8] drop lowest {y} drop highest {y}
=
Function(x@0, y@1) r#2 ⚅#1
	extern[]
	body:
		⚅0 <- roll custom dice @0D[1, 1, 2, 3, 5, 8]
		⚅0 <- drop lowest @1 from ⚅0
		⚅0 <- drop highest @1 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

x, y: 20D10 drop lowest {x} drop lowest {y} drop highest {x} drop highest {y}
=
Function(x@0, y@1) r#2 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 20D10
		@0 <- @0 + @1
		⚅0 <- drop lowest @0 from ⚅0
		⚅0 <- drop highest @0 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

x, y: 20D10 drop highest {x} drop highest {y} drop lowest {x} drop lowest {y}
=
Function(x@0, y@1) r#2 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 20D10
		@0 <- @0 + @1
		⚅0 <- drop highest @0 from ⚅0
		⚅0 <- drop lowest @0 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

x, y: 20D10 drop highest {x} drop lowest {y} drop highest {x} drop lowest {y}
=
Function(x@0, y@1) r#2 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 20D10
		@0 <- @0 + @0
		⚅0 <- drop highest @0 from ⚅0
		@0 <- @1 + @1
		⚅0 <- drop lowest @0 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

x, y: 20D10 drop lowest {x} drop highest {y} drop lowest {x} drop highest {y}
=
Function(x@0, y@1) r#2 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 20D10
		@0 <- @0 + @0
		⚅0 <- drop lowest @0 from ⚅0
		@0 <- @1 + @1
		⚅0 <- drop highest @0 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

[2:8] + [2:8]
=
Function() r#2 ⚅#2
	extern[]
	body:
		⚅0 <- roll range 2:8
		@0 <- sum rolling record ⚅0
		⚅1 <- roll range 2:8
		@1 <- sum rolling record ⚅1
		@0 <- @0 + @1
		return @0

[2:8] - [2:8]
=
Function() r#2 ⚅#2
	extern[]
	body:
		⚅0 <- roll range 2:8
		@0 <- sum rolling record ⚅0
		⚅1 <- roll range 2:8
		@1 <- sum rolling record ⚅1
		@0 <- @0 - @1
		return @0

3D6 + 3D6
=
Function() r#2 ⚅#2
	extern[]
	body:
		⚅0 <- roll standard dice 3D6
		@0 <- sum rolling record ⚅0
		⚅1 <- roll standard dice 3D6
		@1 <- sum rolling record ⚅1
		@0 <- @0 + @1
		return @0

3D6 - 3D6
=
Function() r#2 ⚅#2
	extern[]
	body:
		⚅0 <- roll standard dice 3D6
		@0 <- sum rolling record ⚅0
		⚅1 <- roll standard dice 3D6
		@1 <- sum rolling record ⚅1
		@0 <- @0 - @1
		return @0

2D[-1, 0, 1] + 2D[-1, 0, 1]
=
Function() r#2 ⚅#2
	extern[]
	body:
		⚅0 <- roll custom dice 2D[-1, 0, 1]
		@0 <- sum rolling record ⚅0
		⚅1 <- roll custom dice 2D[-1, 0, 1]
		@1 <- sum rolling record ⚅1
		@0 <- @0 + @1
		return @0

2D[-1, 0, 1] - 2D[-1, 0, 1]
=
Function() r#2 ⚅#2
	extern[]
	body:
		⚅0 <- roll custom dice 2D[-1, 0, 1]
		@0 <- sum rolling record ⚅0
		⚅1 <- roll custom dice 2D[-1, 0, 1]
		@1 <- sum rolling record ⚅1
		@0 <- @0 - @1
		return @0

3D6 drop lowest 1 + 3D6 drop lowest 1
=
Function() r#2 ⚅#2
	extern[]
	body:
		⚅0 <- roll standard dice 3D6
		⚅0 <- drop lowest 1 from ⚅0
		@0 <- sum rolling record ⚅0
		⚅1 <- roll standard dice 3D6
		⚅1 <- drop lowest 1 from ⚅1
		@1 <- sum rolling record ⚅1
		@0 <- @0 + @1
		return @0

3D6 drop highest 1 + 3D6 drop highest 1
=
Function() r#2 ⚅#2
	extern[]
	body:
		⚅0 <- roll standard dice 3D6
		⚅0 <- drop highest 1 from ⚅0
		@0 <- sum rolling record ⚅0
		⚅1 <- roll standard dice 3D6
		⚅1 <- drop highest 1 from ⚅1
		@1 <- sum rolling record ⚅1
		@0 <- @0 + @1
		return @0

x: 9D6 drop lowest ({x} + 1) + 9D6 drop lowest ({x} + 1)
=
Function(x@0) r#2 ⚅#2
	extern[]
	body:
		⚅0 <- roll standard dice 9D6
		@0 <- 1 + @0
		⚅0 <- drop lowest @0 from ⚅0
		@1 <- sum rolling record ⚅0
		⚅1 <- roll standard dice 9D6
		⚅1 <- drop lowest @0 from ⚅1
		@0 <- sum rolling record ⚅1
		@0 <- @1 + @0
		return @0

(1 + 1) + (1 + 1)
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 4

(2 + 1) + (1 + 2)
=
Function() r#0 ⚅#0
	extern[]
	body:
		return 6

x: (1 + {x}) - (1 + {x})
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return 0

x: ({x} - 1) + ({x} - 1)
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- @0 - 1
		@0 <- @0 + @0
		return @0

x: (1 - {x}) + (1 - {x})
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 1 - @0
		@0 <- @0 + @0
		return @0

x: ({x} / 3) + ({x} / 3)
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- @0 / 3
		@0 <- @0 + @0
		return @0

x: (3 / {x}) + (3 / {x})
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 3 / @0
		@0 <- @0 + @0
		return @0

x: ({x} % 3) + ({x} % 3)
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- @0 % 3
		@0 <- @0 + @0
		return @0

x: (3 % {x}) + (3 % {x})
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 3 % @0
		@0 <- @0 + @0
		return @0

x: ({x} ^ 3) + ({x} ^ 3)
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- @0 ^ 3
		@0 <- @0 + @0
		return @0

x: (3 ^ {x}) + (3 ^ {x})
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 3 ^ @0
		@0 <- @0 + @0
		return @0

x: -{x} + -{x}
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- -@0
		@0 <- @0 + @0
		return @0

x: ({x} + 1) + -({x} + 1)
=
Function(x@0) r#2 ⚅#0
	extern[]
	body:
		@0 <- 1 + @0
		@1 <- -@0
		@0 <- @0 + @1
		return @0

x, y: ({x} + {y}) - ({x} + {y}) * ({x} + {y}) / ({x} + {y}) % ({x} + {y})
=
Function(x@0, y@1) r#2 ⚅#0
	extern[]
	body:
		@0 <- @0 + @1
		@1 <- @0 * @0
		@1 <- @1 / @0
		@1 <- @1 % @0
		@0 <- @0 - @1
		return @0

x, y: (({x} + {y}) + ({x} + {y})) + (({x} + {y}) + ({x} + {y}))
=
Function(x@0, y@1) r#2 ⚅#0
	extern[]
	body:
		@0 <- @0 + @1
		@0 <- @0 + @0
		@0 <- @0 + @0
		return @0

x: {x}
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		return @0

x: {x} + 1 + 1 + 1 + 1
=
Function(x@0) r#1 ⚅#0
	extern[]
	body:
		@0 <- 4 + @0
		return @0

x, y: {x} + {y}
=
Function(x@0, y@1) r#2 ⚅#0
	extern[]
	body:
		@0 <- @0 + @1
		return @0

u, v, w, x, y, z: {u} + {v} + {w} + {x} + {y} + {z}
=
Function(u@0, v@1, w@2, x@3, y@4, z@5) r#6 ⚅#0
	extern[]
	body:
		@0 <- @0 + @1
		@1 <- @2 + @3
		@2 <- @4 + @5
		@0 <- @0 + @1
		@0 <- @2 + @0
		return @0

{x}
=
Function() r#1 ⚅#0
	extern[x@0]
	body:
		return @0

{x} + 1
=
Function() r#1 ⚅#0
	extern[x@0]
	body:
		@0 <- 1 + @0
		return @0

{x} + 1 + 1 + 1 + 1
=
Function() r#1 ⚅#0
	extern[x@0]
	body:
		@0 <- 4 + @0
		return @0

{x} + {y}
=
Function() r#2 ⚅#0
	extern[x@0, y@1]
	body:
		@0 <- @0 + @1
		return @0

{u} + {v} + {w} + {x} + {y} + {z}
=
Function() r#6 ⚅#0
	extern[u@0, v@1, w@2, x@3, y@4, z@5]
	body:
		@0 <- @0 + @1
		@1 <- @2 + @3
		@2 <- @4 + @5
		@0 <- @0 + @1
		@0 <- @2 + @0
		return @0

[1 + 2 : 3 + 4]
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll range 3:7
		@0 <- sum rolling record ⚅0
		return @0

(4 - 2)D(3 - 1)
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 2D2
		@0 <- sum rolling record ⚅0
		return @0

(4 * 2)D[-1, 0, 1]
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll custom dice 8D[-1, 0, 1]
		@0 <- sum rolling record ⚅0
		return @0

(8 * 2)D(24 / 3) drop lowest (10 % 7)
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 16D8
		⚅0 <- drop lowest 3 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

(3 ^ 3)D(24 / 3) drop highest (3 + -1)
=
Function() r#1 ⚅#1
	extern[]
	body:
		⚅0 <- roll standard dice 27D8
		⚅0 <- drop highest 2 from ⚅0
		@0 <- sum rolling record ⚅0
		return @0

(1D3)D3
=
Function() r#1 ⚅#2
	extern[]
	body:
		⚅0 <- roll range 1:3
		@0 <- sum rolling record ⚅0
		⚅1 <- roll standard dice @0D3
		@0 <- sum rolling record ⚅1
		return @0

1D(1D3)
=
Function() r#1 ⚅#2
	extern[]
	body:
		⚅0 <- roll range 1:3
		@0 <- sum rolling record ⚅0
		⚅1 <- roll range 1:@0
		@0 <- sum rolling record ⚅1
		return @0

(1D3)D(1D3)
=
Function() r#2 ⚅#3
	extern[]
	body:
		⚅0 <- roll range 1:3
		@0 <- sum rolling record ⚅0
		⚅1 <- roll range 1:3
		@1 <- sum rolling record ⚅1
		⚅2 <- roll standard dice @0D@1
		@0 <- sum rolling record ⚅2
		return @0
